// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package db

import (
	"context"
)

const createAddress = `-- name: CreateAddress :exec
INSERT INTO addresses (
    id, user_id, country, city, street_address
) VALUES (
    $1, $2, $3, $4, $5
)
`

type CreateAddressParams struct {
	ID            string `json:"id"`
	UserID        string `json:"userID"`
	Country       string `json:"country"`
	City          string `json:"city"`
	StreetAddress string `json:"streetAddress"`
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) error {
	_, err := q.db.ExecContext(ctx, createAddress,
		arg.ID,
		arg.UserID,
		arg.Country,
		arg.City,
		arg.StreetAddress,
	)
	return err
}

const createOrder = `-- name: CreateOrder :exec
INSERT INTO orders (
    id, product_id, user_id, address_id, quantity
) VALUES (
    $1, $2, $3, $4, $5
)
`

type CreateOrderParams struct {
	ID        string `json:"id"`
	ProductID string `json:"productID"`
	UserID    string `json:"userID"`
	AddressID string `json:"addressID"`
	Quantity  int32  `json:"quantity"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.db.ExecContext(ctx, createOrder,
		arg.ID,
		arg.ProductID,
		arg.UserID,
		arg.AddressID,
		arg.Quantity,
	)
	return err
}

const createProduct = `-- name: CreateProduct :exec
INSERT INTO products (
    id, name, price, description, stock
) VALUES (
    $1, $2, $3, $4, $5
)
`

type CreateProductParams struct {
	ID          string `json:"id"`
	Name        string `json:"name"`
	Price       int32  `json:"price"`
	Description string `json:"description"`
	Stock       int32  `json:"stock"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.ExecContext(ctx, createProduct,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.Description,
		arg.Stock,
	)
	return err
}

const deleteAddress = `-- name: DeleteAddress :exec
DELETE FROM addresses
WHERE id = $1
`

func (q *Queries) DeleteAddress(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteAddress, id)
	return err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders
WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getAddressById = `-- name: GetAddressById :one
SELECT id, user_id, country, city, street_address, created_at, updated_at FROM addresses
WHERE id = $1
`

func (q *Queries) GetAddressById(ctx context.Context, id string) (Address, error) {
	row := q.db.QueryRowContext(ctx, getAddressById, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Country,
		&i.City,
		&i.StreetAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAddressesByUser = `-- name: GetAddressesByUser :many
SELECT id, user_id, country, city, street_address, created_at, updated_at FROM addresses
WHERE user_id = $1
`

func (q *Queries) GetAddressesByUser(ctx context.Context, userID string) ([]Address, error) {
	rows, err := q.db.QueryContext(ctx, getAddressesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Country,
			&i.City,
			&i.StreetAddress,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderById = `-- name: GetOrderById :one
SELECT id, product_id, user_id, address_id, quantity, created_at, updated_at FROM orders
WHERE id = $1
`

func (q *Queries) GetOrderById(ctx context.Context, id string) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderById, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.UserID,
		&i.AddressID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrdersByUser = `-- name: GetOrdersByUser :many
SELECT id, product_id, user_id, address_id, quantity, created_at, updated_at FROM orders
WHERE user_id = $1
`

func (q *Queries) GetOrdersByUser(ctx context.Context, userID string) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrdersByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.UserID,
			&i.AddressID,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductById = `-- name: GetProductById :one
SELECT id, name, price, description, stock, created_at, updated_at FROM products
WHERE id = $1
`

func (q *Queries) GetProductById(ctx context.Context, id string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Description,
		&i.Stock,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, name, price, description, stock, created_at, updated_at FROM products
`

func (q *Queries) GetProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Description,
			&i.Stock,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password, is_admin, created_at, updated_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, email, password, is_admin, created_at, updated_at FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, name, email, password, is_admin, created_at, updated_at FROM users
WHERE name = $1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAddress = `-- name: UpdateAddress :exec
UPDATE addresses
    set country = $2,
    city = $3,
    street_address = $4
WHERE id = $1
`

type UpdateAddressParams struct {
	ID            string `json:"id"`
	Country       string `json:"country"`
	City          string `json:"city"`
	StreetAddress string `json:"streetAddress"`
}

func (q *Queries) UpdateAddress(ctx context.Context, arg UpdateAddressParams) error {
	_, err := q.db.ExecContext(ctx, updateAddress,
		arg.ID,
		arg.Country,
		arg.City,
		arg.StreetAddress,
	)
	return err
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE orders
    set quantity = $2
WHERE id = $1
`

type UpdateOrderParams struct {
	ID       string `json:"id"`
	Quantity int32  `json:"quantity"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.ExecContext(ctx, updateOrder, arg.ID, arg.Quantity)
	return err
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
    set price = $2,
    description = $3,
    stock = $4
WHERE id = $1
`

type UpdateProductParams struct {
	ID          string `json:"id"`
	Price       int32  `json:"price"`
	Description string `json:"description"`
	Stock       int32  `json:"stock"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct,
		arg.ID,
		arg.Price,
		arg.Description,
		arg.Stock,
	)
	return err
}
