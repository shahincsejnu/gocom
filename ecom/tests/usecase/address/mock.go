// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../usecase/address/usecase.go

// Package mock_address is a generated GoMock package.
package mock_address

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/shahincsejnu/gocom/ecom/infra/sqlc"
)

// MockAddressRepository is a mock of AddressRepository interface.
type MockAddressRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAddressRepositoryMockRecorder
}

// MockAddressRepositoryMockRecorder is the mock recorder for MockAddressRepository.
type MockAddressRepositoryMockRecorder struct {
	mock *MockAddressRepository
}

// NewMockAddressRepository creates a new mock instance.
func NewMockAddressRepository(ctrl *gomock.Controller) *MockAddressRepository {
	mock := &MockAddressRepository{ctrl: ctrl}
	mock.recorder = &MockAddressRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddressRepository) EXPECT() *MockAddressRepositoryMockRecorder {
	return m.recorder
}

// GetList mocks base method.
func (m *MockAddressRepository) GetList(ctx context.Context, userID string) ([]db.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, userID)
	ret0, _ := ret[0].([]db.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockAddressRepositoryMockRecorder) GetList(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockAddressRepository)(nil).GetList), ctx, userID)
}
